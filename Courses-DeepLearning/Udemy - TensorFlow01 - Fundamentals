{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyMs/L6P87lpa2LNkc14GC2h"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# **Deep Learning with TensorFlow**"],"metadata":{"id":"kCojsS46uvyz"}},{"cell_type":"markdown","source":["## Introducction"],"metadata":{"id":"xc7FiuNR8nIA"}},{"cell_type":"markdown","source":["**Used for:**\n","- Problems with long lists of rules\n","- Contninually changing enviroments\n","- Discovers insights within large collections of data\n","\n","**Not good for:**\n","- When you need explainabillity : the patterns learned by a deep learning model are typically uninterpretable by a human\n","- When a traditional approach is a better option\n","- When error are unaccpetable : the outputs are not always predictable\n","- When you dont have much data\n","\n","\n","**Characteristis of Machine Learning**\n","- Structured Data (excel, csv, sql)\n","- Random Forest\n","- Naive Bayes\n","- Nearest neighbour\n","- Support vector machine\n","\n","**Characteristcs of DeepLearning**\n","- Unstructured Data (natural language text, images, voice)\n","- Neural networks\n","- Fully connected neural networks\n","- Convolutional neural networks\n","- Recurrent neural networks\n","- Transformer\n","\n","\n","\n"],"metadata":{"id":"oU3uCy8h2qk3"}},{"cell_type":"markdown","source":["### Neural Networks"],"metadata":{"id":"6wRy303d6aZC"}},{"cell_type":"markdown","source":["- Learn representation of patterns, features, weights\n","- Takes a input data as Numercial encondig and delivers an output data as numbers\n","- It's most important charasteristics are the layers\n","\n","**Anatomy of a Neural Network**\n","- Input Layer :  data goes in here\n","- Hiden Layer : learns patterns in data\n","- Output Layer: learn representation or prediction probabilities\n","\n"],"metadata":{"id":"qLzyllV86cdt"}},{"cell_type":"markdown","source":["### Types of Learning"],"metadata":{"id":"IhSZZE2G8jsj"}},{"cell_type":"markdown","source":["- Supervised Learning : Data and labels\n","- Semi-Supervised Learning : Data and some Labels\n","- Unsupervised Learning : Data and no labels\n","- Transfer Learning: Take a pretrained model and transfer to a new set of data"],"metadata":{"id":"qBEZeYfd8ryV"}},{"cell_type":"markdown","source":["### What is TensorFlow"],"metadata":{"id":"awD1G3509k_p"}},{"cell_type":"markdown","source":["- End to End plataform for Machine Learning\n","- Write fast deep learning code in Python (GPU/TPU)\n","- Able to access many pre-build deep learning models (TensorFlow Hub)\n","- Whole stack: preprocess data, model data, deploy model in your app\n","- Originally designed and usded in house by Google (now-opensource)\n","\n"],"metadata":{"id":"06vQJ_Cu_qis"}},{"cell_type":"markdown","source":["*NOTE : Arquitecture = Model*"],"metadata":{"id":"bKtB5Dar_ZxD"}},{"cell_type":"markdown","source":["### What is a Tensor"],"metadata":{"id":"tA-uSI83BVbU"}},{"cell_type":"markdown","source":["- Ways to represent information\n","- Matrix, List, DataFrames\n","\n","- [[100, 200, 300, 400, 500]] = Tensor"],"metadata":{"id":"CaWAeSdNBjCw"}},{"cell_type":"code","source":[],"metadata":{"id":"3oZGBmM0BnFa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Tensor Flow Fundamentals"],"metadata":{"id":"ynvwnwMzm6hM"}},{"cell_type":"markdown","source":["* Introduction to tensor\n","* Getting information from tensor\n","* Manipulating tensor\n","* Tensors & numpy\n","* Using @tf.funtion 9a way to speed up your regular Python functions\n","* Using GPU's with TensorFlow\n","* Excercises to try for yourself!\n"],"metadata":{"id":"6bXiCxA9nN1j"}},{"cell_type":"markdown","source":["### Introducction to Tensor"],"metadata":{"id":"Iyq6Y0b_nD7W"}},{"cell_type":"code","source":["import tensorflow as tf\n","print(tf.__version__)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DYi_j4bNn0Sf","executionInfo":{"status":"ok","timestamp":1706811145767,"user_tz":180,"elapsed":3458,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"69b9f99c-d26e-443d-dea8-b3956f16e207"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2.15.0\n"]}]},{"cell_type":"code","source":["# Create tensors with tf.constant()\n","\n","scalar = tf.constant(7)\n","scalar"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L9OeU1QWoBcR","executionInfo":{"status":"ok","timestamp":1706811145768,"user_tz":180,"elapsed":7,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"01e3c6cb-0ea4-43be-875a-4fb807cfa7f1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=int32, numpy=7>"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["# Check the number of dimensions of a tensor\n","\n","scalar.ndim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SEPBAi7JodDY","executionInfo":{"status":"ok","timestamp":1706811145768,"user_tz":180,"elapsed":4,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"60c3c100-e635-4e15-f64e-0760c0993fd1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["# Create a vector\n","\n","vector = tf.constant([10,10])\n","\n","vector"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pok7nE_Uokev","executionInfo":{"status":"ok","timestamp":1706811146152,"user_tz":180,"elapsed":387,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"296256e1-bb38-446e-de8c-c8f3f8178b06"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2,), dtype=int32, numpy=array([10, 10], dtype=int32)>"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# Check the dimension of our vector\n","vector.ndim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rEX52X4Doz3U","executionInfo":{"status":"ok","timestamp":1706811146152,"user_tz":180,"elapsed":23,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"53a6e041-3b81-4ad4-ac67-49a8448df99f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# Create a matrix (has more than 1 dimension)\n","matrix = tf.constant([[10,7],[7,10]])\n","matrix"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pUQHl03Qo3ZP","executionInfo":{"status":"ok","timestamp":1706811146152,"user_tz":180,"elapsed":22,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"ca64ec7f-4001-4280-b5d7-a78b3b645e83"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[10,  7],\n","       [ 7, 10]], dtype=int32)>"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["matrix.ndim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pp-LqKlupKHB","executionInfo":{"status":"ok","timestamp":1706811146152,"user_tz":180,"elapsed":21,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"2bca2aee-89d0-465c-b23a-0c2afc11dd59"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# Create another matrix\n","another_matrix = tf.constant([[10., 7.],[3.,2.],[8.,9.]], dtype = tf.float16)\n","\n","another_matrix"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U-tVVTV-pTtI","executionInfo":{"status":"ok","timestamp":1706811146153,"user_tz":180,"elapsed":21,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"998845c1-76d1-4cb6-87e8-bdbd6dc7fba7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 2), dtype=float16, numpy=\n","array([[10.,  7.],\n","       [ 3.,  2.],\n","       [ 8.,  9.]], dtype=float16)>"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["another_matrix.ndim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"klQUs1OEp5ym","executionInfo":{"status":"ok","timestamp":1706811146153,"user_tz":180,"elapsed":20,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"b6788c52-155d-4a97-8a40-50dbd33d0a7d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["# Let's Create a Tensor\n","tensor = tf.constant([\n","  [[0, 1, 2, 3, 4],\n","   [5, 6, 7, 8, 9]],\n","  [[10, 11, 12, 13, 14],\n","   [15, 16, 17, 18, 19]],\n","  [[20, 21, 22, 23, 24],\n","   [25, 26, 27, 28, 29]],])\n","\n","tensor.ndim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P2MdD8OGqMG3","executionInfo":{"status":"ok","timestamp":1706811146153,"user_tz":180,"elapsed":18,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"fc932519-27dc-4890-a098-e23f640364f8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["Wrap up!\n","* Scalar : single number\n","* Vector: a number with direction\n","* Matrix: a 2-dimensional array of numbers\n","* Tensor: an n-dimensional array of numbers"],"metadata":{"id":"iMCe6W2drLIM"}},{"cell_type":"markdown","source":["### Creating Tensors with Variable function"],"metadata":{"id":"e1nte8s-quSS"}},{"cell_type":"code","source":["# Create the same tensor with tf.Variable()\n","changeable_tensor = tf.Variable([10,7])\n","unchangeable_tensor = tf.constant([10,7])\n"],"metadata":{"id":"yLigQDGkrFf0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Change some element of the tensors\n","changeable_tensor[0].assign(7) # Only we can change the Variable vector, not the tf.constant()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gvuHbZ4Rr1Rp","executionInfo":{"status":"ok","timestamp":1706811146153,"user_tz":180,"elapsed":17,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"d1546ece-94e6-40bf-e9cc-412c96f16d77"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Variable 'UnreadVariable' shape=(2,) dtype=int32, numpy=array([7, 7], dtype=int32)>"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["### Creating Random Tensor\n","\n","Random tensor are tensor of some arbitrary lenght"],"metadata":{"id":"vjVHKJuktkMO"}},{"cell_type":"code","source":["# Create two random (but the same) tensors\n","random_1 = tf.random.Generator.from_seed(42)\n","random_1 = random_1.normal(shape=(3,2))\n","random_1\n","random_2 = tf.random.Generator.from_seed(42)\n","random_2 = random_2.normal(shape = (3,2))\n","random_1, random_2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HYHxiUF0su2V","executionInfo":{"status":"ok","timestamp":1706811146153,"user_tz":180,"elapsed":16,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"3e942f54-4a26-41e0-eda3-fdfa85c60fd3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(<tf.Tensor: shape=(3, 2), dtype=float32, numpy=\n"," array([[-0.7565803 , -0.06854702],\n","        [ 0.07595026, -1.2573844 ],\n","        [-0.23193763, -1.8107855 ]], dtype=float32)>,\n"," <tf.Tensor: shape=(3, 2), dtype=float32, numpy=\n"," array([[-0.7565803 , -0.06854702],\n","        [ 0.07595026, -1.2573844 ],\n","        [-0.23193763, -1.8107855 ]], dtype=float32)>)"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","source":["### Shuffle de Order of a Tensor\n","\n","* Valuable for when you want to shuffle your data so the inherent order dosen't affect learning"],"metadata":{"id":"nAsr4bVOveiF"}},{"cell_type":"code","source":["#Shuffle a tensor (valuable for when you want to shuffle your data so the inherent order dosen't affect learning )\n","not_shuffle = tf.constant([\n","  [[0, 1, 2, 3, 4],\n","   [5, 6, 7, 8, 9]],\n","  [[10, 11, 12, 13, 14],\n","   [15, 16, 17, 18, 19]],\n","  [[20, 21, 22, 23, 24],\n","   [25, 26, 27, 28, 29]],])\n","\n","tf.random.shuffle(not_shuffle)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wyowxFnWwk2e","executionInfo":{"status":"ok","timestamp":1706811146153,"user_tz":180,"elapsed":14,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"745c2443-2e5d-4840-d943-b5a050e7d2c4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 2, 5), dtype=int32, numpy=\n","array([[[ 0,  1,  2,  3,  4],\n","        [ 5,  6,  7,  8,  9]],\n","\n","       [[10, 11, 12, 13, 14],\n","        [15, 16, 17, 18, 19]],\n","\n","       [[20, 21, 22, 23, 24],\n","        [25, 26, 27, 28, 29]]], dtype=int32)>"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","source":["### Other ways to make tensors"],"metadata":{"id":"gru3yKuey-HP"}},{"cell_type":"code","source":["# Create tensor of all zeros and ones\n","tf.zeros([3,4])\n","tf.ones([3,4])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vuvdprCn022g","executionInfo":{"status":"ok","timestamp":1706811146153,"user_tz":180,"elapsed":13,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"fc480ab5-a5a7-48e2-9a96-48be4aeb758c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 4), dtype=float32, numpy=\n","array([[1., 1., 1., 1.],\n","       [1., 1., 1., 1.],\n","       [1., 1., 1., 1.]], dtype=float32)>"]},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","source":["### Turn NumPy into Tensors"],"metadata":{"id":"0mVEcwnU08Dl"}},{"cell_type":"code","source":["import numpy as np\n","numpy_A = np.arange(1, 25)\n","numpy_A\n","\n","A = tf.constant(numpy_A, shape = (3,2,4))\n","A"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m2sxgAos1XQX","executionInfo":{"status":"ok","timestamp":1706811146154,"user_tz":180,"elapsed":13,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"2a17d9e6-ad98-4a69-d541-d7e22dff1079"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 2, 4), dtype=int64, numpy=\n","array([[[ 1,  2,  3,  4],\n","        [ 5,  6,  7,  8]],\n","\n","       [[ 9, 10, 11, 12],\n","        [13, 14, 15, 16]],\n","\n","       [[17, 18, 19, 20],\n","        [21, 22, 23, 24]]])>"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","source":["### Getting Information from Tensors\n","\n","**Terms:**\n","* Shape: The Length of each dimension (tensor.shape)\n","* Rank: The number of the tensor dimensions (tensor.ndim)\n","* Axis of Dimen.: A particular dimension of a tensor (tensor[:,0])\n","* Size: The total number of items in the tensor (tf.size(tensor))"],"metadata":{"id":"6oiIpKTV2A8f"}},{"cell_type":"code","source":["# Create a rank 4 tensor( 4 dimension)\n","\n","rank4 = tf.zeros(shape=[2,3,4,5])\n","\n","rank4"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9V1tZ8tg2_hd","executionInfo":{"status":"ok","timestamp":1706811146154,"user_tz":180,"elapsed":12,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"616f945f-c1b7-4007-dd3f-35b26424ad23"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 3, 4, 5), dtype=float32, numpy=\n","array([[[[0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.]],\n","\n","        [[0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.]],\n","\n","        [[0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.]]],\n","\n","\n","       [[[0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.]],\n","\n","        [[0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.]],\n","\n","        [[0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.]]]], dtype=float32)>"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["rank4.shape, rank4.ndim, tf.size(rank4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nvvtnk7T5iP5","executionInfo":{"status":"ok","timestamp":1706811146154,"user_tz":180,"elapsed":11,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"5f13f91d-59a0-40e8-93e3-1a102117491f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TensorShape([2, 3, 4, 5]), 4, <tf.Tensor: shape=(), dtype=int32, numpy=120>)"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["# Get various attributes of our tensor\n"],"metadata":{"id":"2_1dFhpQ6V-B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# prompt: # Get various attributes of our tensor shape, ndim, size, and more attributtes, last element, first elemnt, but with a print function and a text before\n","\n","print(\"Shape of tensor:\", rank4.shape)\n","print(\"Number of dimensions (rank) of tensor:\", rank4.ndim)\n","print(\"Size of tensor:\", tf.size(rank4).numpy())\n","print(\"Elements of tensor on the 0 axis:\", rank4.shape[0])\n","print(\"Elements of tensor on the Last axis:\", rank4.shape[-1])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oJK6tKJa60wb","executionInfo":{"status":"ok","timestamp":1706811146154,"user_tz":180,"elapsed":9,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"92f061ab-1bd5-4483-b64b-c048ddd19a5a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of tensor: (2, 3, 4, 5)\n","Number of dimensions (rank) of tensor: 4\n","Size of tensor: 120\n","Elements of tensor on the 0 axis: 2\n","Elements of tensor on the Last axis: 5\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"Gwv2vwkH7b84"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Indexing and Expansing Tensors"],"metadata":{"id":"6RPvXPUN3YOy"}},{"cell_type":"code","source":["# Get the first 2 elements of each dimension\n","rank4[:2,:2,:2,:2]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NpacgeNv3c1S","executionInfo":{"status":"ok","timestamp":1706811146154,"user_tz":180,"elapsed":8,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"6b9cbd3d-c784-4e8d-e524-2b94959e3578"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2, 2, 2), dtype=float32, numpy=\n","array([[[[0., 0.],\n","         [0., 0.]],\n","\n","        [[0., 0.],\n","         [0., 0.]]],\n","\n","\n","       [[[0., 0.],\n","         [0., 0.]],\n","\n","        [[0., 0.],\n","         [0., 0.]]]], dtype=float32)>"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["# Get the last item of Rank 4\n","\n","rank4[-1,-1,-1,-1]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oY_q4qh85LEf","executionInfo":{"status":"ok","timestamp":1706811730028,"user_tz":180,"elapsed":242,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"0df20a03-6cc8-43ad-de14-9ae2be297936"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=0.0>"]},"metadata":{},"execution_count":27}]},{"cell_type":"markdown","source":["### Add a Dimension\n"],"metadata":{"id":"5JGVSWsK5KuC"}},{"cell_type":"code","source":["# Create extra dimension in the last axis\n","rank5 = rank4[..., tf.newaxis]\n","rank5.ndim\n","\n","# Alternative to tf.newaxis\n","tf.expand_dims(rank4, axis=-1) # -1 means exapand the final axis"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vmQgtKMO5SmM","executionInfo":{"status":"ok","timestamp":1706811926767,"user_tz":180,"elapsed":232,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"2a0abfba-93d2-40ea-df35-f988b1f81b85"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":33}]},{"cell_type":"markdown","source":["## Manipulating Tensors"],"metadata":{"id":"zIN3d0k78dyA"}},{"cell_type":"markdown","source":["### Basic Operations\n","\n","''-', '+' '*' '/'\n","\n"],"metadata":{"id":"SbtvLUSW8sBX"}},{"cell_type":"code","source":["# You can add values to a tensor using + or any other (-,/,*)\n","tensor = tf.constant([[10,7], [3,4]])\n","tensor + 10\n","tensor * 20 #Multiplications\n","tensor / 20 #Divide\n","tensor - 20 #Substraction"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eaYjQ6rv8lcD","executionInfo":{"status":"ok","timestamp":1706812542143,"user_tz":180,"elapsed":3,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"b58549bc-58dd-4eb0-cece-c610eff3f86f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[20, 17],\n","       [13, 14]], dtype=int32)>"]},"metadata":{},"execution_count":35}]},{"cell_type":"markdown","source":["### Matrix Multiplication"],"metadata":{"id":"RUr-WEFU958J"}},{"cell_type":"markdown","source":["1. The inner dimension needs to match\n","2. The result matrix have the same shape that outer dimendion"],"metadata":{"id":"dPFGyjhUAaCd"}},{"cell_type":"code","source":["#Matrix Multiplication\n","tf.matmul(tensor, tensor)\n","\n","# OR with @\n","tensor @ tensor\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ar19FpQE9YQ4","executionInfo":{"status":"ok","timestamp":1706813134889,"user_tz":180,"elapsed":381,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"f6cc9099-ce1e-44df-ce2a-198506c88f40"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[121,  98],\n","       [ 42,  37]], dtype=int32)>"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["# prompt: Creame 2 tensors of (3,2)\n","\n","tensor_1 = tf.constant([[10, 7], [3, 4], [20, 10]])\n","tensor_2 = tf.constant([[5, 8], [9, 1], [10, 3]])\n","\n","# Now we need to change the shape of one tensor to (2,3), for the inner dimensions match\n","tensor_2 = tf.reshape(tensor_2, shape=(2,3))\n","\n","# Or to transpose the tensor\n","tf.transpose(tensor_2)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0mbYO_Lr--_a","executionInfo":{"status":"ok","timestamp":1706815039172,"user_tz":180,"elapsed":239,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"d5116bda-9a39-4553-9518-dfd1c52f7ef3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 2), dtype=int32, numpy=\n","array([[ 5,  1],\n","       [ 8, 10],\n","       [ 9,  3]], dtype=int32)>"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["tensor_1 @ tensor_2 # Order of the factor alter the product CAREFUL!!\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YZDyf7A3ARyG","executionInfo":{"status":"ok","timestamp":1706815041308,"user_tz":180,"elapsed":249,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"af28b134-5f1a-432c-f530-3dd8c65426bb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 3), dtype=int32, numpy=\n","array([[ 57, 150, 111],\n","       [ 19,  64,  39],\n","       [110, 260, 210]], dtype=int32)>"]},"metadata":{},"execution_count":55}]},{"cell_type":"markdown","source":["## Changing Data Types\n","* dtype = int34, int16, float34, float16"],"metadata":{"id":"ANiQ5j2IgrfI"}},{"cell_type":"code","source":["# prompt: crea un tensor de 3 dimensiones y a continuacion cambiale el dtype a float\n","\n","import tensorflow as tf\n","\n","# Create a 3-dimensional tensor of integers\n","tensor = tf.constant([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\n","\n","# Change the dtype of the tensor to float\n","tensor = tf.cast(tensor, dtype=tf.float16)\n","\n","# Print the tensor\n","print(tensor)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"39NhDhCGgxUo","executionInfo":{"status":"ok","timestamp":1706822030174,"user_tz":180,"elapsed":270,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"faaa8b1c-4f99-4954-f404-4286bd33a13f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor(\n","[[[ 1.  2.  3.]\n","  [ 4.  5.  6.]]\n","\n"," [[ 7.  8.  9.]\n","  [10. 11. 12.]]], shape=(2, 2, 3), dtype=float16)\n"]}]},{"cell_type":"markdown","source":["## Agregatting Tensors\n","* Condensing them from multiple values down to smaller amount of values\n","* Mean, Min, Max, Sum, Std, Variance"],"metadata":{"id":"Z9dWXQE2h1ah"}},{"cell_type":"code","source":["# prompt: Creame un ejemplo explicativo para Agregatting tensor\n","\n","# Create a tensor\n","tensor = tf.constant([[1, 2, 3], [4, 5, 6]])\n","\n","# Get the absolute values\n","tensor = tf.abs(tensor)\n","\n","# Sum all the elements in the tensor\n","sum_of_tensor = tf.reduce_sum(tensor)\n","\n","# Print the sum\n","print(f\"The sum of all elements in the tensor is: {sum_of_tensor}\")\n","\n","# Calculate the mean of the tensor\n","mean_of_tensor = tf.reduce_mean(tensor)\n","\n","# Print the mean\n","print(f\"The mean of all elements in the tensor is: {mean_of_tensor}\")\n","\n","# Calculate the maximum value in the tensor\n","max_value = tf.reduce_max(tensor)\n","\n","# Print the maximum value\n","print(f\"The maximum value in the tensor is: {max_value}\")\n","\n","# Calculate the minimum value in the tensor\n","min_value = tf.reduce_min(tensor)\n","\n","# Print the minimum value\n","print(f\"The minimum value in the tensor is: {min_value}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BEvP_euhCJX1","executionInfo":{"status":"ok","timestamp":1706826707342,"user_tz":180,"elapsed":386,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"cb971032-de5d-424d-bd63-26924d5a5d91"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The sum of all elements in the tensor is: 21\n","The mean of all elements in the tensor is: 3\n","The maximum value in the tensor is: 6\n","The minimum value in the tensor is: 1\n"]}]},{"cell_type":"code","source":["# prompt: Repite lo de arriba pero con la std y la varianza\n","\n","# Create a tensor\n","tensor = tf.constant([[1, 2, 3], [4, 5, 6]])\n","\n","# Cast the tensor to a floating-point type\n","tensor = tf.cast(tensor, tf.float32)\n","\n","# Calculate the standard deviation of the tensor\n","std_of_tensor = tf.math.reduce_std(tensor)\n","\n","# Print the standard deviation\n","print(f\"The standard deviation of all elements in the tensor is: {std_of_tensor}\")\n","\n","# Calculate the variance of the tensor\n","variance_of_tensor = tf.math.reduce_variance(tensor)\n","\n","# Print the variance\n","print(f\"The variance of all elements in the tensor is: {variance_of_tensor}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Wht5cEXVtFr_","executionInfo":{"status":"ok","timestamp":1706826707343,"user_tz":180,"elapsed":3,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"32ea1f03-d3c2-4675-b5c4-b9608df2dcbd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The standard deviation of all elements in the tensor is: 1.7078251838684082\n","The variance of all elements in the tensor is: 2.9166667461395264\n"]}]},{"cell_type":"markdown","source":["### Posstional Max and Min"],"metadata":{"id":"hwZs_H1kumSU"}},{"cell_type":"code","source":["# Create a new Tensor for finding positional minimun and maximun\n","tf.random.set_seed(42)\n","F = tf.random.uniform(shape = [50])\n"],"metadata":{"id":"olGmRLlauo3W"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Find the positional max. (index)\n","tf.argmax(F)\n","\n","F[tf.argmax(F)]\n","\n","# Find the positional min. (index)\n","\n","tf.argmin(F)\n","\n","#Find our value\n","\n","F[tf.argmin(F)]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7_RV9GYavdqq","executionInfo":{"status":"ok","timestamp":1706826707343,"user_tz":180,"elapsed":3,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"74f10fd8-b368-4860-cec7-c81a7e4ad8d3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=0.009463668>"]},"metadata":{},"execution_count":69}]},{"cell_type":"markdown","source":["## Squeezing a Tensor\n","* Removing all single dimensions\n","* Remove dimension of size 1 from the shape of a tensor"],"metadata":{"id":"JVAPJPF-ysPJ"}},{"cell_type":"code","source":["# Create a tensor to get started\n","tf.random.set_seed(42)\n","G = tf.constant(tf.random.uniform(shape = [50]), shape = [1,1,1,1,50])\n","G.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kh3wBNUMyvX2","executionInfo":{"status":"ok","timestamp":1706826961076,"user_tz":180,"elapsed":245,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"c4d19aa1-4dda-42a3-dd77-daa87b4cd360"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([1, 1, 1, 1, 50])"]},"metadata":{},"execution_count":72}]},{"cell_type":"code","source":["# Squeeeze our tensor\n","G_sqz = tf.squeeze(G)\n","G_sqz"],"metadata":{"id":"w-kJnmL20A76"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## One-Hot *Enconding*\n","* Numerical enconding\n"],"metadata":{"id":"Qp5jOg4e0mlx"}},{"cell_type":"markdown","source":["\n","One-hot encoding is a representation of categorical data where each category is represented by a vector with all elements set to zero except for the element corresponding to the category. This is useful for machine learning algorithms that expect numerical input data.\n","\n","In TensorFlow, you can use the `tf.one_hot()` function to perform one-hot encoding. The `tf.one_hot()` function takes two arguments:\n","\n","* `indices`: A tensor of indices representing the categories.\n","* `depth`: The number of categories.\n","\n","For example, the following code snippet shows how to use `tf.one_hot()` to encode the categories \"apple\", \"banana\", and \"orange\":\n","\n"],"metadata":{"id":"ue-fv0gP0o4L"}},{"cell_type":"code","source":["# Define the categories\n","categories = [\"apple\", \"banana\", \"orange\"]\n","\n","# Create a tensor of indices representing the categories\n","indices = tf.constant([0, 1, 2])\n","\n","# Perform one-hot encoding\n","one_hot_encoded = tf.one_hot(indices, depth=len(categories), on_value=1., off_value=0.)\n","\n","# Print the one-hot encoded tensor\n","print(one_hot_encoded)\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OZzVZpcd2KYd","executionInfo":{"status":"ok","timestamp":1706827702335,"user_tz":180,"elapsed":260,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"b7dc972f-d412-4fa7-e1b2-3658e2621b74"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor(\n","[[1. 0. 0.]\n"," [0. 1. 0.]\n"," [0. 0. 1.]], shape=(3, 3), dtype=float32)\n"]}]},{"cell_type":"markdown","source":["## Squaring, Log, Square Root\n"],"metadata":{"id":"hBAdlIYX3Hbr"}},{"cell_type":"code","source":["# Create a tensor\n","tensor = tf.constant([1, 2, 3, 4, 5])\n","\n","# Square the tensor\n","squared_tensor = tf.square(tensor)\n","\n","# Calculate the log of the tensor\n","log_tensor = tf.math.log(tf.cast(tensor, dtype= tf.float16))\n","\n","# Calculate the square root of the tensor\n","sqrt_tensor = tf.math.sqrt(tf.cast(tensor, dtype= tf.float16))\n","\n","# Print the results\n","print(\"Squared Tensor:\", squared_tensor)\n","print(\"Log Tensor:\", log_tensor)\n","print(\"Square Root Tensor:\", sqrt_tensor)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9JAYmdtG3OF0","executionInfo":{"status":"ok","timestamp":1706828024798,"user_tz":180,"elapsed":259,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"6b1276fb-431d-4c20-bf0b-d22d1e520d96"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Squared Tensor: tf.Tensor([ 1  4  9 16 25], shape=(5,), dtype=int32)\n","Log Tensor: tf.Tensor([0.     0.6934 1.099  1.387  1.609 ], shape=(5,), dtype=float16)\n","Square Root Tensor: tf.Tensor([1.    1.414 1.732 2.    2.236], shape=(5,), dtype=float16)\n"]}]},{"cell_type":"markdown","source":["## Tensors and Numpy"],"metadata":{"id":"SFV-pDVn4Nag"}},{"cell_type":"code","source":["\n","import numpy as np\n","\n","\n","# Create a NumPy array\n","numpy_array = np.array([10, 7, 3, 4])\n","\n","# Create a tensor directly from the NumPy array\n","tensor = tf.constant(numpy_array)\n","\n","# Print the tensor\n","print(tensor)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zTmaJGS44U_r","executionInfo":{"status":"ok","timestamp":1706828076981,"user_tz":180,"elapsed":228,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"41cb503d-2dbd-48e6-b539-6e828776e015"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor([10  7  3  4], shape=(4,), dtype=int64)\n"]}]},{"cell_type":"code","source":["# Back to NumpyArray\n","np.array(tensor), type(np.array(tensor))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uKoHPIra4dZ5","executionInfo":{"status":"ok","timestamp":1706828151582,"user_tz":180,"elapsed":255,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"ca07842a-6963-4d8b-de9d-d6b74e9b49a6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([10,  7,  3,  4]), numpy.ndarray)"]},"metadata":{},"execution_count":89}]},{"cell_type":"code","source":["# Also with numpy function\n","tensor.numpy(), type(tensor.numpy())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oUsvZplM4fbe","executionInfo":{"status":"ok","timestamp":1706828231053,"user_tz":180,"elapsed":242,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"802c38a5-4275-41f0-ec43-55416ec6e184"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([10,  7,  3,  4]), numpy.ndarray)"]},"metadata":{},"execution_count":90}]},{"cell_type":"markdown","source":["## Finding access to GPU\n"],"metadata":{"id":"G0usuEVy5yCu"}},{"cell_type":"code","source":["import tensorflow as tf\n","tf.config.list_physical_devices('GPU')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zA8L0YHF53vd","executionInfo":{"status":"ok","timestamp":1706828649436,"user_tz":180,"elapsed":3,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"6029eff2-46f1-42ed-b50e-1326e5a268ac"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["!nvidia-smi"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HkyuenuR5_OB","executionInfo":{"status":"ok","timestamp":1706828664288,"user_tz":180,"elapsed":435,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"a3f1ab51-b16d-43d8-b279-977607a2dc3a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Thu Feb  1 23:04:23 2024       \n","+---------------------------------------------------------------------------------------+\n","| NVIDIA-SMI 535.104.05             Driver Version: 535.104.05   CUDA Version: 12.2     |\n","|-----------------------------------------+----------------------+----------------------+\n","| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |\n","|                                         |                      |               MIG M. |\n","|=========================================+======================+======================|\n","|   0  Tesla T4                       Off | 00000000:00:04.0 Off |                    0 |\n","| N/A   40C    P8               9W /  70W |      3MiB / 15360MiB |      0%      Default |\n","|                                         |                      |                  N/A |\n","+-----------------------------------------+----------------------+----------------------+\n","                                                                                         \n","+---------------------------------------------------------------------------------------+\n","| Processes:                                                                            |\n","|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |\n","|        ID   ID                                                             Usage      |\n","|=======================================================================================|\n","|  No running processes found                                                           |\n","+---------------------------------------------------------------------------------------+\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"PZq29FZ16oh3"},"execution_count":null,"outputs":[]}]}