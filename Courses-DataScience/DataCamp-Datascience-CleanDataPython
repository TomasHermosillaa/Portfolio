{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPVLRauOnMqa8Vf41Ikt3Jb"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Summing strings and concatenating number"],"metadata":{"id":"qx7jTSBDXVHg"}},{"cell_type":"code","source":["# prompt: create a pd dataframe call ride_sharing with str column name duration and with values of  minutes  (example: 12 minutes, 10 minutes, .....)\n","\n","import pandas as pd\n","import numpy as np\n","\n","ride_sharing = pd.DataFrame({'duration': np.random.randint(1, 60, size=100),\n","                           'unit': 'minutes'})\n","ride_sharing['duration'] = ride_sharing['duration'].astype(str) + ' ' + ride_sharing['unit']\n"],"metadata":{"id":"w1AxoxwYZ2I3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ride_sharing.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"Xl9Mrh8waapu","executionInfo":{"status":"ok","timestamp":1709722687603,"user_tz":180,"elapsed":6,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"284ceedc-059d-4522-c7be-cca1348918a8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     duration     unit\n","0  51 minutes  minutes\n","1  44 minutes  minutes\n","2  47 minutes  minutes\n","3  23 minutes  minutes\n","4  34 minutes  minutes"],"text/html":["\n","  <div id=\"df-86068a92-3bc3-4ec8-aa7e-973196a7f2d6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>duration</th>\n","      <th>unit</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>51 minutes</td>\n","      <td>minutes</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>44 minutes</td>\n","      <td>minutes</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>47 minutes</td>\n","      <td>minutes</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>23 minutes</td>\n","      <td>minutes</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>34 minutes</td>\n","      <td>minutes</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-86068a92-3bc3-4ec8-aa7e-973196a7f2d6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-86068a92-3bc3-4ec8-aa7e-973196a7f2d6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-86068a92-3bc3-4ec8-aa7e-973196a7f2d6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b4de5cbb-610d-44bd-a32e-816fa6ef7aa6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b4de5cbb-610d-44bd-a32e-816fa6ef7aa6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b4de5cbb-610d-44bd-a32e-816fa6ef7aa6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"ride_sharing","summary":"{\n  \"name\": \"ride_sharing\",\n  \"rows\": 100,\n  \"fields\": [\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"59 minutes\",\n          \"42 minutes\",\n          \"24 minutes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unit\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"minutes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["# Strip duration of minutes\n","ride_sharing['duration_trim'] = ride_sharing['duration'].str.strip('minutes')\n","\n","# Convert duration to integer\n","ride_sharing['duration_time'] = ride_sharing['duration_trim'].astype('int')\n","\n","# Write an assert statement making sure of conversion\n","assert ride_sharing['duration_time'].dtype == 'int'\n","\n","# Print formed columns and calculate average ride duration\n","print(ride_sharing[['duration','duration_trim','duration_time']])\n","print(ride_sharing['duration_time'].mean())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zp94Zq5eZzAU","executionInfo":{"status":"ok","timestamp":1709722703786,"user_tz":180,"elapsed":264,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"ad156e1c-ac1e-4c79-a3c5-fdd3bcb1f8fb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["      duration duration_trim  duration_time\n","0   51 minutes           51              51\n","1   44 minutes           44              44\n","2   47 minutes           47              47\n","3   23 minutes           23              23\n","4   34 minutes           34              34\n","..         ...           ...            ...\n","95  33 minutes           33              33\n","96  46 minutes           46              46\n","97  50 minutes           50              50\n","98  26 minutes           26              26\n","99  56 minutes           56              56\n","\n","[100 rows x 3 columns]\n","31.74\n"]}]},{"cell_type":"markdown","source":["## Data Range Constraints"],"metadata":{"id":"TfIWMNZ4a_tf"}},{"cell_type":"markdown","source":["Replace all of the values above 27 and change it by 27"],"metadata":{"id":"F2hX0h0EeC2y"}},{"cell_type":"code","source":["# Convert tire_sizes to integer\n","ride_sharing['tire_sizes'] = ride_sharing['tire_sizes'].astype('int')\n","\n","# Set all values above 27 to 27, if your data shoudnt be above 27 you can coverted in 27\n","ride_sharing.loc[ride_sharing.tire_sizes > 27, 'tire_sizes'] = 27\n","\n","# Reconvert tire_sizes back to categorical\n","ride_sharing['tire_sizes'] = ride_sharing['tire_sizes'].astype('category')\n","\n","# Print tire size description\n","print(ride_sharing['tire_sizes'].describe())"],"metadata":{"id":"QhL7OSA3bDFj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Convert all the futures dates to an actual date\n"],"metadata":{"id":"5Jbv6hDHeKr4"}},{"cell_type":"code","source":["import datetime as dt\n","\n","# Convert ride_date to date\n","ride_sharing['ride_dt'] = pd.to_datetime(ride_sharing['ride_date']).dt.date\n","\n","# Save today's date\n","today = dt.date.today()\n","\n","# Set all in the future to today's date\n","ride_sharing.loc[ride_sharing['ride_dt'] > today, 'ride_dt'] = today\n","\n","# Print maximum of ride_dt column\n","print(ride_sharing['ride_dt'].max())"],"metadata":{"id":"O2AC58XudrKo"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Duplicate Values"],"metadata":{"id":"o1_xaIPofEVm"}},{"cell_type":"code","source":["# Drop complete duplicates from ride_sharing\n","ride_dup = ride_sharing.drop_duplicates()\n","\n","# Create statistics dictionary for aggregation function\n","statistics = {'user_birth_year': 'min', 'duration': 'mean'}\n","\n","# Group by ride_id and compute new statistics\n","ride_unique = ride_dup.groupby('ride_id').agg(statistics).reset_index()\n","\n","# Find duplicated values again\n","duplicates = ride_unique.duplicated(subset = 'ride_id', keep = False)\n","duplicated_rides = ride_unique[duplicates == True]\n","\n","# Assert duplicates are processed\n","assert duplicated_rides.shape[0] == 0"],"metadata":{"id":"alQx6I1hfGbS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["This solution works by first removing all the completely duplicated rows in the 'ride_sharing' DataFrame using the 'drop_duplicates()' function. The result is stored in 'ride_dup'.\n","\n","Next, a dictionary called 'statistics' is created. This dictionary will be used to specify how to aggregate the data when grouping. The key 'user_birth_year' is associated with the value 'min', meaning that the minimum value of 'user_birth_year' will be used in the aggregation. Similarly, the key 'duration' is associated with the value 'mean', meaning that the mean value of 'duration' will be used in the aggregation.\n","\n","The 'groupby()' function is then used on 'ride_dup' to group the data by 'ride_id'. The 'agg()' function is used to apply the aggregation specified in the 'statistics' dictionary to the grouped data. The 'reset_index()' function is used to reset the index of the DataFrame after the grouping and aggregation.\n","\n","After this, the 'duplicated()' function is used to find any duplicated 'ride_id' in the 'ride_unique' DataFrame. The result is a Boolean Series where True indicates that the 'ride_id' is duplicated. This Series is stored in 'duplicates'.\n","\n","The Boolean Series 'duplicates' is then used to filter 'ride_unique' to get only the rows where 'ride_id' is duplicated. These rows are stored in 'duplicated_rides'.\n","\n","Finally, an 'assert' statement is used to check that all duplicates have been processed. If the number of rows in 'duplicated_rides' is not 0, this means that there are still duplicates in the data, and the 'assert' statement will raise an AssertionError. If the number of rows in 'duplicated_rides' is 0, this means that all duplicates have been processed, and the 'assert' statement will pass without raising an error."],"metadata":{"id":"7Cpe0w-Mf2Nh"}},{"cell_type":"markdown","source":["## Finding Consistency"],"metadata":{"id":"C2PWDOs_f22N"}},{"cell_type":"code","source":["# Find the cleanliness category in airlines not in categories\n","cat_clean = set(airlines['cleanliness']).difference(categories['cleanliness'])\n","\n","# Find rows with that category\n","cat_clean_rows = airlines['cleanliness'].isin(cat_clean)\n","\n","# Print rows with inconsistent category\n","print(airlines[cat_clean_rows])"],"metadata":{"id":"PAhnveNYjbpT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Remapping or Replacing a value for consistency"],"metadata":{"id":"YbXcq7keYN9a"}},{"cell_type":"code","source":["import pandas as pd\n","\n","airlines = pd.DataFrame()\n","\n","airlines['dest_region'] = ['Asia', 'Canada/Mexico', 'West US', 'East US', 'Midwest US', 'EAST US',\n"," 'Middle East', 'Europe', 'eur', 'Central/South America',\n"," 'Australia/New Zealand', 'middle east']\n","\n","# Remapping and lower case\n","\n","# Lower dest_region column and then replace \"eur\" with \"europe\"\n","airlines['new_dest_region'] = airlines['dest_region'].str.lower()\n","airlines['new_dest_region'] = airlines['new_dest_region'].replace({'eur':'europe'})\n","\n","\n","# Verify changes have been effected\n","print(airlines['dest_region'].unique())\n","\n","print(airlines['new_dest_region'].unique())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ageWzG41YSqi","executionInfo":{"status":"ok","timestamp":1709823140635,"user_tz":180,"elapsed":260,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"47365b82-96dd-4d90-df5b-2c468482b1d7"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["['Asia' 'Canada/Mexico' 'West US' 'East US' 'Midwest US' 'EAST US'\n"," 'Middle East' 'Europe' 'eur' 'Central/South America'\n"," 'Australia/New Zealand' 'middle east']\n","['asia' 'canada/mexico' 'west us' 'east us' 'midwest us' 'middle east'\n"," 'europe' 'central/south america' 'australia/new zealand']\n"]}]},{"cell_type":"markdown","source":["## Remapping Categories"],"metadata":{"id":"90T0dzyedCUZ"}},{"cell_type":"code","source":["# Create ranges for categories\n","label_ranges = [0, 60, 180, np.inf]\n","label_names = ['short', 'medium', \"long\"]\n","\n","# Create wait_type column\n","airlines['wait_type'] = pd.cut(airlines['wait_min'], bins = label_ranges,\n","                                labels = label_names)\n","\n","# Here we make a 3 new categories for each time duration of a flight, using a ranges and labels for each range of duration\n","\n","# Create mappings and replace\n","mappings = {'Monday':'weekday', 'Tuesday':'weekday', 'Wednesday': 'weekday',\n","            'Thursday': 'weekday', 'Friday': 'weekday',\n","            'Saturday': 'weekend', 'Sunday': 'weekend'}\n","\n","airlines['day_week'] = airlines['day'].replace(mappings)\n","\n","\n","# Here we create a new category containing 2 labels for weekend a weekday diferentiation"],"metadata":{"id":"cMKn8zaIZGvP"},"execution_count":null,"outputs":[]}]}