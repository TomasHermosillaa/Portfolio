{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMPMGtMFMuQ3hWU7Boj/NPu"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Function Descriptions"],"metadata":{"id":"mAsGCl8Dc0-W"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"M4rXidrhcsQm"},"outputs":[],"source":["def count_letter(content, letter):\n","  \"\"\"Count the number of times `letter` appears in `content`.\n","\n","  Args:\n","    content (str): The string to search.\n","    letter (str): The letter to search for.\n","\n","  # Add a returns section\n","  Returns:\n","    int\n","  \"\"\"\n","  if (not isinstance(letter, str)) or len(letter) != 1:\n","    raise ValueError('\"letter\" must be a single character string.')\n","  return len([char for char in content if char == letter])"]},{"cell_type":"code","source":["import inspect\n","\n","# Inspect the count_letter() function to get its docstring\n","docstring = inspect.getdoc(count_letter)\n","\n","border = '#' * 28\n","print('{}\\n{}\\n{}'.format(border, docstring, border))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JhBGAR6cdg2x","executionInfo":{"status":"ok","timestamp":1708700082148,"user_tz":180,"elapsed":364,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"f850e2b5-8ad6-4cbc-b78f-ddb9a226de53"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["############################\n","Count the number of times `letter` appears in `content`.\n","\n","Args:\n","  content (str): The string to search.\n","  letter (str): The letter to search for.\n","\n","# Add a returns section\n","Returns:\n","  int\n","############################\n"]}]},{"cell_type":"markdown","source":["## DRY : Dont Repeat Yourself or Do One Thing"],"metadata":{"id":"dAQv46Z2dfWQ"}},{"cell_type":"markdown","source":["Make that our functions do just one thing, better do more functions than all in one"],"metadata":{"id":"OoTsb7oEenc4"}},{"cell_type":"markdown","source":["## Passing Variables\n"],"metadata":{"id":"rkqKqUIFiSp_"}},{"cell_type":"markdown","source":["Some Varibles like list or dicts can be mutable when you use functions, so yo need to returns his values to default in order to not keep data that you dont want"],"metadata":{"id":"rbv8dYr6iVau"}},{"cell_type":"code","source":["# Use an immutable variable for the default argument\n","def better_add_column(values, df=None):\n","  \"\"\"Add a column of `values` to a DataFrame `df`.\n","  The column will be named \"col_<n>\" where \"n\" is\n","  the numerical index of the column.\n","\n","  Args:\n","    values (iterable): The values of the new column\n","    df (DataFrame, optional): The DataFrame to update.\n","      If no DataFrame is passed, one is created by default.\n","\n","  Returns:\n","    DataFrame\n","  \"\"\"\n","  # Update the function to create a default DataFrame\n","  if df is None:\n","    df = pandas.DataFrame()  # Here we empty the memory of the list previously used\n","  df['col_{}'.format(len(df.columns))] = values\n","  return df"],"metadata":{"id":"6VkInZtzeGdI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Context Maganers"],"metadata":{"id":"DwEfDOPktP1C"}},{"cell_type":"markdown","source":["### Timer()\n"],"metadata":{"id":"qr5wlXiGtTcv"}},{"cell_type":"code","source":["image = get_image_from_instagram()\n","\n","# Time how long process_with_numpy(image) takes to run\n","with timer():\n","  print('Numpy version')\n","  process_with_numpy(image)\n","\n","# Time how long process_with_pytorch(image) takes to run\n","with timer():\n","  print('Pytorch version')\n","  process_with_pytorch(image)"],"metadata":{"id":"jShwy7kNtSSU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Open files()"],"metadata":{"id":"s2pk6-6RtVbh"}},{"cell_type":"code","source":["# Open \"alice.txt\" and assign the file to \"file\"\n","with open('alice.txt') as file:\n","  text = file.read()\n","\n","n = 0\n","for word in text.split():\n","  if word.lower() in ['cat', 'cats']:\n","    n += 1\n","\n","print('Lewis Carroll uses the word \"cat\" {} times'.format(n))"],"metadata":{"id":"vVAFPoqltXl2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Create a contextmanager function"],"metadata":{"id":"cmPjjA_pyFxx"}},{"cell_type":"code","source":["# Add a decorator that will make timer() a context manager\n","@contextlib.contextmanager\n","def timer():\n","  \"\"\"Time the execution of a context block.\n","\n","  Yields:\n","    None\n","  \"\"\"\n","  start = time.time()\n","  # Send control back to the context block\n","  yield\n","  end = time.time()\n","  print('Elapsed: {:.2f}s'.format(end - start))\n","\n","with timer():\n","  print('This should take approximately 0.25 seconds')\n","  time.sleep(0.25)"],"metadata":{"id":"HR_h3cRiyH0s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["@contextlib.contextmanager\n","def open_read_only(filename):\n","  \"\"\"Open a file in read-only mode.\n","\n","  Args:\n","    filename (str): The location of the file to read\n","\n","  Yields:\n","    file object\n","  \"\"\"\n","  read_only_file = open(filename, mode='r')\n","  # Yield read_only_file so it can be assigned to my_file\n","  yield read_only_file\n","  # Close read_only_file\n","  read_only_file.close()\n","\n","with open_read_only('my_file.txt') as my_file:\n","  print(my_file.read())"],"metadata":{"id":"1GoLAB8ryYKB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Handling errors:"],"metadata":{"id":"d1yXOWkTzP2z"}},{"cell_type":"code","source":[],"metadata":{"id":"DK1wQ5pKzTAx"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Scope"],"metadata":{"id":"2XtgsteiP1DP"}},{"cell_type":"markdown","source":["### Nested Functions"],"metadata":{"id":"OCprGLIYSYYv"}},{"cell_type":"code","source":["def read_files():\n","  file_contents = None\n","\n","  def save_contents(filename):\n","    # Add a keyword that lets us modify file_contents\n","    nonlocal file_contents  # Here we call non local to reference something that it's not in the global scope and not in local either\n","    if file_contents is None:\n","      file_contents = []\n","    with open(filename) as fin:\n","      file_contents.append(fin.read())\n","\n","  for filename in ['1984.txt', 'MobyDick.txt', 'CatsEye.txt']:\n","    save_contents(filename)\n","\n","  return file_contents\n","\n","print('\\n'.join(read_files()))"],"metadata":{"id":"VR3QDDjgP4C8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Global Scope"],"metadata":{"id":"w2UM3LLnSvYv"}},{"cell_type":"code","source":["def wait_until_done():\n","  def check_is_done():\n","    # Add a keyword so that wait_until_done()\n","    # doesn't run forever\n","    global done\n","    if random.random() < 0.1:\n","      done = True\n","\n","  while not done:\n","    check_is_done()\n","\n","done = False\n","wait_until_done()\n","\n","print('Work done? {}'.format(done))"],"metadata":{"id":"6v8dQk_0Swxj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Decorators"],"metadata":{"id":"3uoM8BNTTYc0"}},{"cell_type":"markdown","source":["* Functions that change the behavior of another function with out changing the code of the function"],"metadata":{"id":"aFHD6weTUOVX"}},{"cell_type":"code","source":["# First we defined the decorator funct:\n","def print_before_and_after(func):\n","  def wrapper(a, b):\n","    print('Before {}'.format(func.__name__))\n","    # Call the function being decorated with *args\n","    func(a+ 2, b+2)\n","    print('After {}'.format(func.__name__))\n","\n","  # Return the nested function\n","  return wrapper\n","\n","# Then we call the decorator in order to change our multiply function\n","@print_before_and_after\n","def multiply(a, b):\n","  print(a * b)\n","\n","multiply(5, 10)\n","\n","\n","# NOTE: if we eliminate the decorator (@print_before_....) we can call multiply with out modifications"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6z4gnSuWTaBf","executionInfo":{"status":"ok","timestamp":1709033951800,"user_tz":180,"elapsed":249,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"db467eda-7699-4194-a2a6-89d53ea7d073"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Before multiply\n","84\n","After multiply\n"]}]},{"cell_type":"code","source":["def multiply(a, b):\n","  print(a * b)\n","\n","multiply(5, 10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yWrM6VT7Vem-","executionInfo":{"status":"ok","timestamp":1709034309803,"user_tz":180,"elapsed":375,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"8a331451-ccf4-4e7d-ebfd-358aead13c6f"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["50\n"]}]},{"cell_type":"markdown","source":["### Real World Examples\n"],"metadata":{"id":"HEzgNRswXqwF"}},{"cell_type":"code","source":["import time\n","from functools import wraps\n","\n","def timer(func):\n","    @wraps(func)\n","    def wrapper_timer(*args, **kwargs):\n","        start_time = time.time()\n","        result = func(*args, **kwargs)\n","        end_time = time.time()\n","        execution_time = end_time - start_time\n","        print(f\"Function {func.__name__} took {execution_time:.6f} seconds to execute.\")\n","        return result\n","    return wrapper_timer\n","\n","# Example usage:\n","@timer\n","def example_function():\n","    # Simulate some time-consuming operation\n","    time.sleep(2)\n","    print(\"Function executed!\")\n","\n","example_function()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SvPO507tXt-s","executionInfo":{"status":"ok","timestamp":1709034445268,"user_tz":180,"elapsed":2119,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"b3ea936f-2169-4239-a7c1-ba6ca377aa50"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Function executed!\n","Function example_function took 2.003669 seconds to execute.\n"]}]},{"cell_type":"code","source":["# Decorate foo() with the counter() decorator\n","@timer\n","def foo():\n","  print('calling foo()')\n","\n","foo()\n","foo()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-tEuuhiEYoz5","executionInfo":{"status":"ok","timestamp":1709034463592,"user_tz":180,"elapsed":272,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"7ef6a85d-51e2-4456-fa07-009405b07430"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["calling foo()\n","Function foo took 0.001187 seconds to execute.\n","calling foo()\n","Function foo took 0.000024 seconds to execute.\n"]}]},{"cell_type":"markdown","source":["### Decorator with arguments"],"metadata":{"id":"xBS8Oef3bI1Z"}},{"cell_type":"code","source":["from functools import wraps\n","\n","def run_n_times(n):\n","    def decorator(func):\n","        @wraps(func)\n","        def wrapper(*args, **kwargs):\n","            for _ in range(n):\n","                func(*args, **kwargs)\n","        return wrapper\n","    return decorator\n"],"metadata":{"id":"uZGN63VKbbKG","executionInfo":{"status":"ok","timestamp":1709035077471,"user_tz":180,"elapsed":278,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["# Make print_sum() run 10 times with the run_n_times() decorator\n","@run_n_times(10)\n","def print_sum(a, b):\n","  print(a + b)\n","\n","print_sum(15, 20)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8_fjZkPVbHgc","executionInfo":{"status":"ok","timestamp":1709035079472,"user_tz":180,"elapsed":3,"user":{"displayName":"Tomas Hermosilla","userId":"08015635776946965066"}},"outputId":"88b22310-5d56-431f-f873-75e951c3c426"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["35\n","35\n","35\n","35\n","35\n","35\n","35\n","35\n","35\n","35\n"]}]},{"cell_type":"markdown","source":["### Timeout Decorator"],"metadata":{"id":"vBdQgN0IbmzO"}},{"cell_type":"code","source":[],"metadata":{"id":"CB5NB3J_boff"},"execution_count":null,"outputs":[]}]}