{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPlE6XEezUF5WOwBtzOizHJ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Import txt file\n","\n"],"metadata":{"id":"Bc8ykSBnhikc"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"t9rGGMlmhZQ0"},"outputs":[],"source":["with open('archivo.txt', 'r') as file:\n","  # Print it\n","  print(file.read())\n","  # Check whether file is closed\n","  print(file.closed)\n","\n","  # Close file\n","  file.close()\n","\n","  # Check whether file is closed\n","\n","  print(file.closed)"]},{"cell_type":"code","source":["# Read & print the first 3 lines\n","with open('moby_dick.txt') as file:\n","    print(file.readline())\n","    print(file.readline())\n","    print(file.readline())"],"metadata":{"id":"KE4t6xwhhn8U"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Import Flat files"],"metadata":{"id":"dsSTUDxtvoCd"}},{"cell_type":"code","source":["# Assign filename to variable: file\n","file = 'digits.csv'\n","\n","# Load file as array: digits\n","digits = np.loadtxt(file, delimiter=\",\")\n","\n","# Print datatype of digits\n","print(type(digits))\n","\n","# Select and reshape a row\n","im = digits[9, 1:]\n","im_sq = np.reshape(im, (28, 28))\n","\n","# Plot reshaped data (matplotlib.pyplot already loaded as plt)\n","plt.imshow(im_sq, cmap='Greys', interpolation='nearest')\n","plt.show()\n"],"metadata":{"id":"v5HMxGfGvr9a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Import numpy\n","import numpy as np\n","\n","# Assign the filename: file\n","file = 'digits_header.txt'\n","\n","# Load the data: data\n","data = np.loadtxt(file, delimiter='\\t', skiprows=1, usecols=[0,2]) # delimitador = tabspace = \"\\t\"\n","\n","# Print data\n","print(data)"],"metadata":{"id":"bLMsKQvowom-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Import with pandas"],"metadata":{"id":"VAMcRyAdy1zk"}},{"cell_type":"markdown","source":["A matrix  has rows and columns. A data frame has observation and variables"],"metadata":{"id":"WJwI0W7qy3u_"}},{"cell_type":"code","source":["# Import matplotlib.pyplot as plt\n","import matplotlib.pyplot as plt\n","\n","# Assign filename: file\n","file = 'titanic_corrupt.txt'\n","\n","# Import file: data\n","data = pd.read_csv(file, sep='\\t', comment='#', na_values=['Nothing'], n_rows = 5)\n","\n","# Print the head of the DataFrame\n","print(data.head())\n","\n","# Plot 'Age' variable in a histogram\n","pd.DataFrame.hist(data[['Age']])\n","plt.xlabel('Age (years)')\n","plt.ylabel('count')\n","plt.show()"],"metadata":{"id":"CnRrt2dby3TS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Excel Files"],"metadata":{"id":"N5ZK_ZWig0Js"}},{"cell_type":"code","source":["# Import pandas\n","import pandas as pd\n","\n","# Assign spreadsheet filename: file\n","file = 'battledeath.xlsx'\n","\n","# Load spreadsheet: xls\n","xls = pd.ExcelFile(file)\n","\n","# Print sheet names\n","print(xls.sheet_names)\n"],"metadata":{"id":"frtxIY9cg2Go"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Parse the first sheet and rename the columns: df1\n","df1 = xls.parse(0, skiprows=[0], names=['Country', 'AAM due to War (2002)'])\n","\n","# Print the head of the DataFrame df1\n","print(df1.head())\n","\n","# Parse the first column of the second sheet and rename the column: df2\n","df2 = xls.parse(1, usecols=[0], skiprows=[0], names=['Country'])\n","\n","# Print the head of the DataFrame df2\n","print(df2.head())"],"metadata":{"id":"BDS_9FMBhGvR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## MatLab Files"],"metadata":{"id":"IERj510yiA6I"}},{"cell_type":"code","source":["# Import package\n","import scipy.io\n","\n","# Load MATLAB file: mat\n","mat = scipy.io.loadmat('albeck_gene_expression.mat')\n","\n","# Print the datatype type of mat\n","print(type(mat))\n","\n","# Print the keys of the MATLAB dictionary\n","print(mat.keys())\n","\n","# Print the type of the value corresponding to the key 'CYratioCyt'\n","print(type(mat['CYratioCyt']))\n","\n","# Print the shape of the value corresponding to the key 'CYratioCyt'\n","print(np.shape(mat['CYratioCyt']))\n","\n","# Subset the array and plot it\n","data = mat['CYratioCyt'][25, 5:]\n","fig = plt.figure()\n","plt.plot(data)\n","plt.xlabel('time (min.)')\n","plt.ylabel('normalized fluorescence (measure of expression)')\n","plt.show()"],"metadata":{"id":"7962RFtsiDWg"},"execution_count":null,"outputs":[]}]}